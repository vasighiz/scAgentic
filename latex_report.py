import os
import subprocess
from datetime import datetime
from typing import Dict, Any, Optional
import scanpy as sc
import matplotlib.pyplot as plt
import re
import shutil

def sanitize_latex(text: str) -> str:
    """
    Sanitize text for LaTeX by escaping special characters.
    
    Args:
        text: Input text to sanitize
        
    Returns:
        Sanitized text safe for LaTeX
    """
    if not isinstance(text, str):
        return str(text)
    
    # Dictionary of special characters and their LaTeX escapes
    special_chars = {
        '_': '\\_',
        '%': '\\%',
        '&': '\\&',
        '#': '\\#',
        '{': '\\{',
        '}': '\\}',
        '~': '\\textasciitilde{}',
        '^': '\\textasciicircum{}',
        '\\': '\\textbackslash{}',
        '$': '\\$',
        '<': '\\textless{}',
        '>': '\\textgreater{}'
    }
    
    # Replace special characters
    for char, escape in special_chars.items():
        text = text.replace(char, escape)
    
    return text

def check_file_exists(filepath: str) -> bool:
    """
    Check if a file exists and is accessible.
    
    Args:
        filepath: Path to the file
        
    Returns:
        True if file exists and is accessible, False otherwise
    """
    try:
        return os.path.isfile(filepath) and os.access(filepath, os.R_OK)
    except Exception:
        return False

def generate_latex_report(
    adata: sc.AnnData,
    output_dir: str,
    study_info: Dict[str, str],
    params: Dict[str, Any],
    qc_stats: Dict[str, Any],
    figures: Optional[Dict[str, plt.Figure]] = None,
    runtime: float = None
) -> str:
    """
    Generate a LaTeX report with all analysis results.
    
    Args:
        adata: AnnData object containing the data
        output_dir: Directory to save the report
        study_info: Dictionary containing study information
        params: Dictionary containing analysis parameters
        qc_stats: Dictionary containing QC statistics
        figures: Optional dictionary of pre-generated figures from preprocessing
        runtime: Total runtime of the analysis in seconds
        
    Returns:
        Path to the generated PDF report
    """
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Save figures as PNG files
    figure_paths = {}
    if figures is not None:
        for name, fig in figures.items():
            png_path = os.path.join(output_dir, f"{name}.png")
            fig.savefig(png_path, dpi=300, bbox_inches='tight')
            figure_paths[name] = png_path
            plt.close(fig)
    
    # Sanitize all text inputs
    sanitized_study_info = {k: sanitize_latex(v) for k, v in study_info.items()}
    sanitized_params = {k: sanitize_latex(v) for k, v in params.items()}
    
    # Get GEO accession from study info or output directory
    geo_accession = sanitized_study_info.get('geo_accession', '')
    if not geo_accession:
        # Try to extract from output directory name
        dir_name = os.path.basename(output_dir)
        if 'analysis_results_' in dir_name:
            geo_accession = dir_name.replace('analysis_results_', '')
    
    # Copy logo to output directory
    logo_src = "scagentic_logo.png"
    logo_dst = os.path.join(output_dir, "scagentic_logo.png")
    if os.path.exists(logo_src):
        shutil.copy2(logo_src, logo_dst)
    
    # Generate LaTeX content
    latex_content = f"""
\\documentclass[12pt]{{article}}
\\usepackage[utf8]{{inputenc}}
\\usepackage{{graphicx}}
\\usepackage{{booktabs}}
\\usepackage{{multirow}}
\\usepackage{{amsmath}}
\\usepackage{{hyperref}}
\\usepackage{{geometry}}
\\usepackage{{fancyhdr}}
\\usepackage{{caption}}
\\usepackage{{subcaption}}
\\usepackage{{float}}
\\usepackage{{enumitem}}
\\usepackage{{xcolor}}

% Page geometry
\\geometry{{a4paper, margin=1in}}

% Header and footer
\\pagestyle{{fancy}}
\\fancyhf{{}}
\\fancyhead[L]{{scAgentic}}
\\fancyhead[R]{{Single-Cell Analysis Report}}
\\fancyfoot[C]{{Page \\thepage}}

% Document info
\\title{{Single-Cell RNA-seq Analysis Report}}
\\date{{{datetime.now().strftime('%B %d, %Y')}}}

% Hyperref settings
\\hypersetup{{
    colorlinks=true,
    linkcolor=blue,
    filecolor=magenta,
    urlcolor=cyan
}}

% Custom commands
\\newcommand{{\\datasetname}}[1]{{\\textbf{{#1}}}}
\\newcommand{{\\paramname}}[1]{{\\texttt{{#1}}}}

% Begin document
\\begin{{document}}

% Title page
\\begin{{titlepage}}
    \\centering
    \\vspace*{{2cm}}
    
    % Logo
    \\includegraphics[width=0.4\\textwidth]{{scagentic_logo.png}}
    \\vspace{{1cm}}
    
    \\Huge\\textbf{{Single-Cell RNA-seq Analysis Report}}\\\\[1cm]
    
    \\large{{{datetime.now().strftime('%B %d, %Y')}}}\\\\[0.5cm]
    
    \\large{{GEO Accession: {geo_accession}}}\\\\[2cm]
    
    \\vfill
    \\large{{Generated by scAgentic - AI-Powered Single-Cell Analysis}}
\\end{{titlepage}}

% Table of Contents
\\tableofcontents
\\newpage

% Study Information
\\section{{Study Information}}
\\subsection{{Metadata}}
\\begin{{table}}[h]
    \\centering
    \\begin{{tabular}}{{ll}}
        \\toprule
        \\textbf{{Field}} & \\textbf{{Value}} \\\\
        \\midrule
        Title & {sanitized_study_info.get('title', 'Not available')} \\\\
        Organism & {sanitized_study_info.get('organism', 'Not available')} \\\\
        Tissue & {sanitized_study_info.get('tissue', 'Not available')} \\\\
        \\bottomrule
    \\end{{tabular}}
    \\caption{{Study metadata from GEO}}
\\end{{table}}

\\subsection{{Study Summary}}
{sanitized_study_info.get('summary', 'Not available')}

% Analysis Summary
\\section{{Analysis Summary}}
\\begin{{table}}[h]
    \\centering
    \\begin{{tabular}}{{ll}}
        \\toprule
        \\textbf{{Metric}} & \\textbf{{Value}} \\\\
        \\midrule
        Total Cells & {adata.n_obs:,} \\\\
        Total Genes & {adata.n_vars:,} \\\\
        Number of Clusters & {len(adata.obs['leiden'].unique())} \\\\
        Runtime & {runtime:.2f} seconds \\\\
        \\bottomrule
    \\end{{tabular}}
    \\caption{{Summary of analysis results}}
\\end{{table}}

\\subsection{{Analysis Parameters}}
\\begin{{table}}[h]
    \\centering
    \\begin{{tabular}}{{ll}}
        \\toprule
        \\textbf{{Parameter}} & \\textbf{{Value}} \\\\
        \\midrule
        Min Genes per Cell & {sanitized_params.get('min_genes', 'N/A')} \\\\
        Min Cells per Gene & {sanitized_params.get('min_cells', 'N/A')} \\\\
        Max \% MT & {sanitized_params.get('max_percent_mt', 'N/A')} \\\\
        Top Genes & {sanitized_params.get('n_top_genes', 'N/A')} \\\\
        Number of PCs & {sanitized_params.get('n_pcs', 'N/A')} \\\\
        Resolution & {sanitized_params.get('resolution', 'N/A')} \\\\
        \\bottomrule
    \\end{{tabular}}
    \\caption{{Analysis parameters used}}
\\end{{table}}

% Quality Control
\\section{{Quality Control}}
\\subsection{{Highest Expressed Genes}}
"""
    
    # Add figure if it exists
    if 'highest_expr_genes' in figure_paths and check_file_exists(figure_paths['highest_expr_genes']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['highest_expr_genes'])}}}
    \\caption{{Top 20 genes by expression level across all cells}}
\\end{{figure}}
"""

    latex_content += """
\\subsection{{QC Distributions}}
"""
    
    # Add QC distributions figure if it exists
    if 'qc_distributions' in figure_paths and check_file_exists(figure_paths['qc_distributions']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['qc_distributions'])}}}
    \\caption{{Distribution of key QC metrics including number of genes per cell, total counts, and mitochondrial percentage}}
\\end{{figure}}
"""

    latex_content += """
% Feature Selection
\\section{{Feature Selection}}
\\subsection{{Highly Variable Genes}}
"""
    
    # Add HVG figure if it exists
    if 'highly_variable_genes' in figure_paths and check_file_exists(figure_paths['highly_variable_genes']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['highly_variable_genes'])}}}
    \\caption{{Selection of highly variable genes based on normalized dispersion}}
\\end{{figure}}
"""

    latex_content += """
% Dimensionality Reduction
\\section{{Dimensionality Reduction}}
\\subsection{{PCA Variance Ratio}}
"""
    
    # Add PCA variance figure if it exists
    if 'pca_variance' in figure_paths and check_file_exists(figure_paths['pca_variance']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['pca_variance'])}}}
    \\caption{{Variance explained by each principal component}}
\\end{{figure}}
"""

    latex_content += """
\\subsection{{PCA Visualization}}
"""
    
    # Add PCA figure if it exists
    if 'pca' in figure_paths and check_file_exists(figure_paths['pca']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['pca'])}}}
    \\caption{{PCA visualization showing cell clusters in reduced dimensional space}}
\\end{{figure}}
"""

    latex_content += """
\\subsection{{UMAP Visualization}}
"""
    
    # Add UMAP figure if it exists
    if 'umap' in figure_paths and check_file_exists(figure_paths['umap']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['umap'])}}}
    \\caption{{UMAP visualization of cell clusters}}
\\end{{figure}}
"""

    latex_content += """
% Differential Expression
\\section{{Differential Expression Analysis}}
"""
    
    # Add DE figure if it exists
    if 'de' in figure_paths and check_file_exists(figure_paths['de']):
        latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{os.path.basename(figure_paths['de'])}}}
    \\caption{{Top differentially expressed genes for each cluster}}
\\end{{figure}}
"""

    # Add violin plots for top DE genes if they exist
    violin_plots = [f for f in os.listdir(output_dir) if f.startswith('violin_') and f.endswith('.pdf')]
    if violin_plots:
        latex_content += """
\\subsection{{Gene Expression Violin Plots}}
"""
        for plot in violin_plots:
            gene_name = plot.replace('violin_', '').replace('.pdf', '')
            latex_content += f"""
\\begin{{figure}}[h]
    \\centering
    \\includegraphics[width=0.8\\textwidth]{{{plot}}}
    \\caption{{Expression distribution of {gene_name} across clusters}}
\\end{{figure}}
"""

    latex_content += """
% Appendix
\\appendix
\\section{{Top Differentially Expressed Genes by Cluster}}
"""
    
    # Add DE genes table if available
    if 'rank_genes_groups' in adata.uns:
        for cluster in adata.obs['leiden'].unique():
            latex_content += f"""
\\subsection{{Cluster {cluster}}}
\\begin{{table}}[h]
    \\centering
    \\begin{{tabular}}{{lrr}}
        \\toprule
        \\textbf{{Gene}} & \\textbf{{Score}} & \\textbf{{P-value}} \\\\
        \\midrule
"""
            for i in range(20):
                gene = sanitize_latex(adata.uns['rank_genes_groups']['names'][cluster][i])
                score = adata.uns['rank_genes_groups']['scores'][cluster][i]
                pval = adata.uns['rank_genes_groups']['pvals'][cluster][i]
                latex_content += f"        {gene} & {score:.2f} & {pval:.2e} \\\\\n"
            
            latex_content += """
        \\bottomrule
    \\end{tabular}
    \\caption{Top 20 differentially expressed genes}
\\end{table}
"""
    
    latex_content += """
\\end{document}
"""
    
    # Save LaTeX file
    tex_path = os.path.join(output_dir, 'report.tex')
    with open(tex_path, 'w', encoding='utf-8') as f:
        f.write(latex_content)
    
    # Compile LaTeX to PDF
    try:
        # First pass
        result = subprocess.run(
            ['pdflatex', '-interaction=nonstopmode', tex_path],
            cwd=output_dir,
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0:
            print("LaTeX compilation error (first pass):")
            print(result.stdout)
            print(result.stderr)
            raise subprocess.CalledProcessError(result.returncode, ['pdflatex'])
        
        # Second pass
        result = subprocess.run(
            ['pdflatex', '-interaction=nonstopmode', tex_path],
            cwd=output_dir,
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0:
            print("LaTeX compilation error (second pass):")
            print(result.stdout)
            print(result.stderr)
            raise subprocess.CalledProcessError(result.returncode, ['pdflatex'])
        
    except subprocess.CalledProcessError as e:
        print(f"Error compiling LaTeX: {e}")
        print("Full error output:")
        print(e.stdout)
        print(e.stderr)
        raise
    
    # Return path to the generated PDF
    return os.path.join(output_dir, 'report.pdf') 